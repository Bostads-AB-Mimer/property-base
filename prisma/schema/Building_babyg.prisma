model Building {
  id             String  @id(map: "pkbabyg") @map("keybabyg") @db.Char(15)
  objectId       String  @unique(map: "akbabyg1") @map("keycmobj") @db.Char(15)
  buildingTypeId String? @map("keybabyt") @db.Char(15)

  marketAreaId          String? @map("keybabya") @db.Char(15)
  districtId            String? @map("keybabyb") @db.Char(15)
  propertyDesignationId String? @map("keybabyc") @db.Char(15)

  // TODO: Uncomment and verify naming for these fields when original schema is available
  districtObjectId String? @map("keybanbh") @ignore @db.Char(15) // empty table in db therefore ignored
  blockId          String? @map("keybablo") @db.Char(15)
  // buildingMemoryClassificationId String? @map("keybacls") @db.Char(15)

  heatingId             String?   @map("keybahea") @db.Char(15)
  buildingCode          String    @unique @map("code") @db.VarChar(30)
  name                  String?   @map("caption") @db.VarChar(60)
  description           String?   @map("beskrivn") @db.VarChar(60)
  constructionYear      Int?      @map("byggnadsar") @db.SmallInt
  renovationYear        Int?      @map("ombyggar") @db.SmallInt
  valueYear             Int?      @map("valueyear") @db.SmallInt
  heating               String?   @map("uppvarmn") @db.VarChar(20)
  fireRating            String?   @map("brandklass") @db.VarChar(20)
  insuranceClass        String?   @map("forsklass") @db.VarChar(20)
  insuranceValue        Int?      @map("forsvarde")
  lmhNumber             String?   @map("lmvhusnr") @db.VarChar(14)
  assessmentYear        Int?      @map("assyear") @db.SmallInt
  grade                 Int       @default(0, map: "DF__babyg__grade__7EDC9D61") @map("grade") @db.TinyInt
  socialPlan            Int       @default(0, map: "DF__babyg__socialpla__7FD0C19A") @map("socialplan") @db.TinyInt
  socialPlanFrom        DateTime? @map("socialfrom") @db.Date
  socialPlanTo          DateTime? @map("socialto") @db.Date
  percentCommonArea     Int?      @map("sharecarea") @db.SmallInt
  deleteMark            Int       @default(0, map: "DF__babyg__deletemar__00C4E5D3") @map("deletemark") @db.TinyInt
  fromDate              DateTime  @map("fdate") @db.DateTime
  toDate                DateTime  @map("tdate") @db.DateTime
  lastContractStartDate DateTime? @map("hylaststrt") @db.DateTime
  lastContractEndDate   DateTime? @map("hylaststop") @db.DateTime
  timestamp             String    @map("timestamp") @db.Char(10) // TODO: change timestamp later when knowing more about its usage

  // Relations, keeping the old names for now with a TODO to change when new names are available
  // block bablo? @relation(fields: [blockId], references: [keybablo], onUpdate: NoAction, map: "fkbabygkeybablo ")
  marketArea          MarketArea?          @relation("fkbabygkeybabya", fields: [marketAreaId], references: [id], onUpdate: NoAction)
  district            District?            @relation("fkbabygkeybabyb", fields: [districtId], references: [id], onUpdate: NoAction)
  propertyDesignation PropertyDesignation? @relation("fkbabygkeybabyc", fields: [propertyDesignationId], references: [id], onUpdate: NoAction)

  buildingType BuildingType? @relation("fkbabygkeybabyt", fields: [buildingTypeId], references: [id], onUpdate: NoAction)

  // TODO: Uncomment and verify naming for these relations when original schema is available
  // buildingMemoryClassification bacls? @relation(fields: [buildingMemoryClassificationId], references: [keybacls], onUpdate: NoAction, map: "fkbabygkeybacls ")

  heatingSystem  Heating?       @relation(fields: [heatingId], references: [heatingId], onUpdate: NoAction, map: "fkbabygkeybahea ")
  // district banbh? @relation(fields: [districtId], references: [keybanbh], onUpdate: NoAction, map: "fkbabygkeybanbh ")
  // object cmobj @relation(fields: [objectId], references: [keycmobj], onDelete: Cascade, onUpdate: NoAction, map: "fkbabygkeycmobj ")
  propertyObject PropertyObject @relation(fields: [objectId], references: [propertyObjectId], onDelete: NoAction, onUpdate: NoAction, map: "fkbabygkeycmobj ")

  // buildingType BuildingType? @relation(fields: [buildingTypeId], references: [buildingTypeId], onUpdate: NoAction, map: "fkbabygkeybabyt ")

  Property Property[]

  // TODO: Uncomment and verify naming for these indexes when original schema is available
  // @@index([buildingMemoryClassificationId], map: "fkbabygbacls")
  @@index([heatingId], map: "fkbabygbahea")
  @@index([districtId], map: "fkbabygbanbh")
  @@index([toDate], map: "inbabyg_2M30NAG13")
  @@index([fromDate], map: "inbabyg_2M30NAG1W")
  @@index([name], map: "inbabyg_2M30NAG2R")
  @@index([buildingCode], map: "inbabyg_2M30NAG42")
  @@map("babyg")
}
