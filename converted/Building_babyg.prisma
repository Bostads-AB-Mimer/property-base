model Building {
  @@map("babyg")

  buildingId String @id(map: "pkbabyg") @map("keybabyg") @db.Char(15)
  objectId String @unique(map: "akbabyg1") @map("keycmobj") @db.Char(15)
  buildingTypeId String? @map("keybabyt") @db.Char(15) // TODO: Confirm with previous conversion when available
  freeTable1Id String? @map("keybabya") @db.Char(15) // TODO: Specific meaning needed for better naming
  freeTable2Id String? @map("keybabyb") @db.Char(15) // TODO: Specific meaning needed for better naming
  freeTable3Id String? @map("keybabyc") @db.Char(15) // TODO: Specific meaning needed for better naming
  districtId String? @map("keybanbh") @db.Char(15) // TODO: Confirm naming with context knowledge
  blockId String? @map("keybablo") @db.Char(15) // TODO: Confirm naming with context knowledge
  buildingMemoryClassificationId String? @map("keybacls") @db.Char(15) // Could be related to historical classification?
  heatingId String? @map("keybahea") @db.Char(15) // TODO: Verify relation once more information is obtained
  buildingCode String @map("code") @db.VarChar(30)
  buildingName String? @map("caption") @db.VarChar(60)
  buildingDescription String? @map("beskrivn") @db.VarChar(60)
  constructionYear Int? @map("byggnadsar") @db.SmallInt
  renovationYear Int? @map("ombyggar") @db.SmallInt
  valueYear Int? @map("valueyear") @db.SmallInt
  heatingDescription String? @map("uppvarmn") @db.VarChar(20)
  fireClassification String? @map("brandklass") @db.VarChar(20)
  insuranceClassification String? @map("forsklass") @db.VarChar(20)
  insuranceValue Int? @map("forsvarde")
  lmHouseNumber String? @map("lmvhusnr") @db.VarChar(14)
  assessmentYear Int? @map("assyear") @db.SmallInt // TODO: Clarify usage
  buildingGrade Int @default(0, map: "DF__babyg__grade__7EDC9D61") @map("grade") @db.TinyInt
  socialPlanning Int @default(0, map: "DF__babyg__socialpla__7FD0C19A") @map("socialplan") @db.TinyInt
  socialPlanStartDate DateTime? @map("socialfrom") @db.Date
  socialPlanEndDate DateTime? @map("socialto") @db.Date
  commonAreaPercentage Int? @map("sharecarea") @db.SmallInt
  deleteMark Int @default(0, map: "DF__babyg__deletemar__00C4E5D3") @map("deletemark") @db.TinyInt
  fromDate DateTime @map("fdate") @db.DateTime
  toDate DateTime @map("tdate") @db.DateTime
  lastContractStartDate DateTime? @map("hylaststrt") @db.DateTime
  lastContractEndDate DateTime? @map("hylaststop") @db.DateTime
  timestamp String @map("timestamp") @db.Char(10) // TODO: change timestamp later when knowing more about its usage

  babya babya? @relation(fields: [keybabya], references: [keybabya], onUpdate: NoAction, map: "fkbabygkeybabya") // TODO: change relation name when available
  babyb babyb? @relation(fields: [keybabyb], references: [keybabyb], onUpdate: NoAction, map: "fkbabygkeybabyb") // TODO: change relation name when available
  babyc babyc? @relation(fields: [keybabyc], references: [keybabyc], onUpdate: NoAction, map: "fkbabygkeybabyc") // TODO: change relation name when available
  babyt BuildingType? @relation(fields: [buildingTypeId], references: [buildingTypeId], onUpdate: NoAction, map: "fkbabygkeybabyt")
  bahea bahea? @relation(fields: [keybahea], references: [keybahea], onUpdate: NoAction, map: "fkbabygkeybahea") // TODO: change relation name when available
  cmobj cmobj @relation(fields: [keycmobj], references: [keycmobj], onDelete: Cascade, onUpdate: NoAction, map: "fkbabygkeycmobj") // TODO: change relation name when available

  @@index([keybahea], map: "fkbabygbahea")
  @@index([toDate], map: "inbabyg_2M30NAG13")
  @@index([fromDate], map: "inbabyg_2M30NAG1W")
  @@index([buildingName], map: "inbabyg_2M30NAG2R")
  @@index([buildingCode], map: "inbabyg_2M30NAG42")
}